@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Home</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavDropdown">
            <ul class="navbar-nav">
                @if (_isUserAuthenticated)
                {
                    <li class="nav-item">
                        @* ReSharper disable once Html.PathError *@
                        <a class="nav-link" href="products">Products</a>
                    </li>
                    <li class="nav-item">
                        @* ReSharper disable once Html.PathError *@
                        <a class="nav-link" href="categories">Categories</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="" @onclick="SingOutASync">Sign-Out</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        @* ReSharper disable once Html.PathError *@
                        <a class="nav-link" href="/signin">Sign-In</a>
                    </li>
                    <li class="nav-item">
                        @* ReSharper disable once Html.PathError *@
                        <a class="nav-link" href="register">Register</a>
                    </li>
                }            
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool _isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        if (authState.User.Identity != null)
        {
            _isUserAuthenticated = authState.User.Identity.IsAuthenticated;
        }
    }

    private async Task SingOutASync()
    {
        // ReSharper disable once UnusedVariable
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // ReSharper disable once UnusedVariable
        var user = authState.User;
    }
}
```
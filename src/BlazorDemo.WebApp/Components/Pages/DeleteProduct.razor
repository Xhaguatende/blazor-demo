@inject IProductServices ProductServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="modal fade" id="@GetModalId(Product)" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">@_title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the product: <strong>@Product?.Name</strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button"
                        class="btn btn-primary"
                        data-bs-dismiss="modal"
                        @onclick="ConfirmAsync">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnProductDeleted { get; set; }  // Add this line

    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public Product? Product { get; set; }

    public static string GetModalId(Product? product)
    {
        ArgumentNullException.ThrowIfNull(product);

        return $"deleteModal-{product.Id}";
    }

    private string _title = string.Empty;

    protected override void OnParametersSet()
    {
        _title = $"Delete {Product?.Name}";
    }

    private async Task ConfirmAsync()
    {
        await ProductServices.DeleteAsync(Product!.Id);
        await OnProductDeleted.InvokeAsync();

    }
}

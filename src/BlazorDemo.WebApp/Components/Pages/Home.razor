@page "/"
@inject ProductsClient ProductsClient
@attribute [StreamRendering]

<PageTitle>Product Catalogue</PageTitle>

<div class="mt-2 mb-2">
    <a class="btn btn-primary" role="button" href="/newproduct">New Product</a>
</div>

@if(_products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Stock</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Category.Name</td>
                    <td class="text-end">@product.Price.ToString("C2")</td>
                    <td>@product.Stock</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary me-2" role="button" href="@ProductUrl(product.Id)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger" 
                                    role="button" 
                                    data-bs-toggle="modal"
                                    data-bs-target="@GetDeleteModalId(product)"
                                    href="/deleteproduct/@product.Id">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <DeleteProduct Product="@product" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private List<ProductSummary>? _products = [];

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductsClient.GetProductsAsync();
    }

    private static string ProductUrl(Guid id) => $"/editproduct/{id}";

    private string GetDeleteModalId(ProductSummary product)
    { 
        return $"#{DeleteProduct.GetModalId(product)}";
    }
}
 
